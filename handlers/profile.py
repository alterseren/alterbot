from aiogram import types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy import select
from models import User
from database import SessionLocal
from states import EditProfileState

async def register_user(message: types.Message, state: FSMContext):
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†):")
    await state.set_state(EditProfileState.waiting_for_birth_date)

async def set_birth_date(message: types.Message, state: FSMContext):
    birth_date = message.text
    await state.update_data(birth_date=birth_date)
    await message.answer("üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –≤–∏ –Ω–∞—Ä–æ–¥–∏–ª–∏—Å—è:")
    await state.set_state(EditProfileState.waiting_for_birth_city)

async def set_birth_city(message: types.Message, state: FSMContext):
    birth_city = message.text
    await state.update_data(birth_city=birth_city)
    
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if user:
            await message.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
        else:
            user_data = await state.get_data()
            new_user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                birth_date=user_data['birth_date'],
                birth_city=user_data['birth_city']
            )
            session.add(new_user)
            await session.commit()
            await message.answer("üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
    
    await state.clear()

async def view_profile(message: types.Message, state: FSMContext):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if user:
            response = (
                f"üÜî –í–∞—à Telegram ID: {user.telegram_id}\n"
                f"üë§ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {user.birth_date or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üèôÔ∏è –ú—ñ—Å—Ç–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {user.birth_city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}"
            )
            await message.answer(response)
        else:
            await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")

async def edit_profile(message: types.Message, state: FSMContext):
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –Ω–æ–≤—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†):")
    await state.set_state(EditProfileState.waiting_for_birth_date)

async def set_new_birth_date(message: types.Message, state: FSMContext):
    birth_date = message.text
    await state.update_data(birth_date=birth_date)
    await message.answer("üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –º—ñ—Å—Ç–æ, –¥–µ –≤–∏ –Ω–∞—Ä–æ–¥–∏–ª–∏—Å—è:")
    await state.set_state(EditProfileState.waiting_for_birth_city)

async def set_new_birth_city(message: types.Message, state: FSMContext):
    birth_city = message.text
    await state.update_data(birth_city=birth_city)
    
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if user:
            user_data = await state.get_data()
            user.birth_date = user_data['birth_date']
            user.birth_city = user_data['birth_city']
            await session.commit()
            await message.answer("üéâ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
    
    await state.clear()